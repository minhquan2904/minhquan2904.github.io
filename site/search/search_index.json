{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Unbounded Realm","text":"<p>Welcome to The Unbounded Realm, where creativity knows no limits and exploration knows no bounds. Join us on a journey through the endless possibilities of programming and everyday life.</p>"},{"location":"#coding-adventures","title":"Coding Adventures","text":""},{"location":"#exploring-the-digital-wilderness","title":"Exploring the Digital Wilderness","text":"<p>Embark on a quest through the digital wilderness, where lines of code are the paths we tread and algorithms are the secrets waiting to be discovered.</p>"},{"location":"#crafting-code-poetry","title":"Crafting Code Poetry","text":"<p>Discover the beauty of code poetry, where syntax becomes art and algorithms dance in elegant harmony. Let's weave words and code into lyrical masterpieces.</p>"},{"location":"#life-chronicles","title":"Life Chronicles","text":""},{"location":"#wanderlust-chronicles","title":"Wanderlust Chronicles","text":"<p>Follow our wanderlust chronicles as we traverse the globe, seeking inspiration in the wonders of nature and the diversity of cultures.</p>"},{"location":"#gastronomic-escapades","title":"Gastronomic Escapades","text":"<p>Indulge in our gastronomic escapades, where culinary delights from every corner of the world await. Join us as we savor the flavors of life, one bite at a time.</p>"},{"location":"#musings-marvels","title":"Musings &amp; Marvels","text":""},{"location":"#philosophical-ponderings","title":"Philosophical Ponderings","text":"<p>Delve into the depths of existential ponderings and philosophical musings. Let's contemplate the mysteries of the universe and the meaning of life itself.</p>"},{"location":"#marvels-of-the-mundane","title":"Marvels of the Mundane","text":"<p>Marvel at the beauty of the mundane, where everyday moments are transformed into extraordinary experiences. Let's find wonder in the simplicity of life.</p>"},{"location":"#connect-contribute","title":"Connect &amp; Contribute","text":"<p>Join The Unbounded Realm community and share your own adventures, musings, and marvels. Together, let's create a tapestry of creativity and inspiration that knows no bounds!</p> <p>The Unbounded Realm \u00a9 2024. All rights reserved. | About</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/#dillinger","title":"Dillinger","text":""},{"location":"blog/#the-last-markdown-editor-ever","title":"The Last Markdown Editor, Ever","text":"<p>Dillinger is a cloud-enabled, mobile-ready, offline-storage compatible, AngularJS-powered HTML5 Markdown editor.</p> <ul> <li>Type some Markdown on the left</li> <li>See HTML in the right</li> <li>\u2728Magic \u2728</li> </ul>"},{"location":"blog/#features","title":"Features","text":"<ul> <li>Import a HTML file and watch it magically convert to Markdown</li> <li>Drag and drop images (requires your Dropbox account be linked)</li> <li>Import and save files from GitHub, Dropbox, Google Drive and One Drive</li> <li>Drag and drop markdown and HTML files into Dillinger</li> <li>Export documents as Markdown, HTML and PDF</li> </ul> <p>Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email. As John Gruber writes on the Markdown site</p> <p>The overriding design goal for Markdown's formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions.</p> <p>This text you see here is *actually- written in Markdown! To get a feel for Markdown's syntax, type some text into the left window and watch the results in the right.</p>"},{"location":"blog/#tech","title":"Tech","text":"<p>Dillinger uses a number of open source projects to work properly:</p> <ul> <li>AngularJS - HTML enhanced for web apps!</li> <li>Ace Editor - awesome web-based text editor</li> <li>markdown-it - Markdown parser done right. Fast and easy to extend.</li> <li>Twitter Bootstrap - great UI boilerplate for modern web apps</li> <li>node.js - evented I/O for the backend</li> <li>Express - fast node.js network app framework @tjholowaychuk</li> <li>Gulp - the streaming build system</li> <li>Breakdance - HTML to Markdown converter</li> <li>jQuery - duh</li> </ul> <p>And of course Dillinger itself is open source with a public repository  on GitHub.</p>"},{"location":"blog/#installation","title":"Installation","text":"<p>Dillinger requires Node.js v10+ to run.</p> <p>Install the dependencies and devDependencies and start the server.</p> <pre><code>cd dillinger\nnpm i\nnode app\n</code></pre> <p>For production environments...</p> <pre><code>npm install --production\nNODE_ENV=production node app\n</code></pre>"},{"location":"blog/#plugins","title":"Plugins","text":"<p>Dillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below.</p> Plugin README Dropbox plugins/dropbox/README.md GitHub plugins/github/README.md Google Drive plugins/googledrive/README.md OneDrive plugins/onedrive/README.md Medium plugins/medium/README.md Google Analytics plugins/googleanalytics/README.md"},{"location":"blog/#development","title":"Development","text":"<p>Want to contribute? Great!</p> <p>Dillinger uses Gulp + Webpack for fast developing. Make a change in your file and instantaneously see your updates!</p> <p>Open your favorite Terminal and run these commands.</p> <p>First Tab:</p> <pre><code>node app\n</code></pre> <p>Second Tab:</p> <pre><code>gulp watch\n</code></pre> <p>(optional) Third:</p> <pre><code>karma test\n</code></pre>"},{"location":"blog/#building-for-source","title":"Building for source","text":"<p>For production release:</p> <pre><code>gulp build --prod\n</code></pre> <p>Generating pre-built zip archives for distribution:</p> <pre><code>gulp build dist --prod\n</code></pre>"},{"location":"blog/#docker","title":"Docker","text":"<p>Dillinger is very easy to install and deploy in a Docker container.</p> <p>By default, the Docker will expose port 8080, so change this within the Dockerfile if necessary. When ready, simply use the Dockerfile to build the image.</p> <pre><code>cd dillinger\ndocker build -t &lt;youruser&gt;/dillinger:${package.json.version} .\n</code></pre> <p>This will create the dillinger image and pull in the necessary dependencies. Be sure to swap out <code>${package.json.version}</code> with the actual version of Dillinger.</p> <p>Once done, run the Docker image and map the port to whatever you wish on your host. In this example, we simply map port 8000 of the host to port 8080 of the Docker (or whatever port was exposed in the Dockerfile):</p> <pre><code>docker run -d -p 8000:8080 --restart=always --cap-add=SYS_ADMIN --name=dillinger &lt;youruser&gt;/dillinger:${package.json.version}\n</code></pre> <p>Note: <code>--capt-add=SYS-ADMIN</code> is required for PDF rendering.</p> <p>Verify the deployment by navigating to your server address in your preferred browser.</p> <pre><code>127.0.0.1:8000\n</code></pre>"},{"location":"blog/#license","title":"License","text":"<p>MIT</p> <p>Free Software, Hell Yeah!</p>"},{"location":"blog/posts/hello-word/","title":"Hello world!","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"}]}